// Code generated by goctl. DO NOT EDIT.

package user_coupons

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userCouponsFieldNames          = builder.RawFieldNames(&UserCoupons{})
	userCouponsRows                = strings.Join(userCouponsFieldNames, ",")
	userCouponsRowsExpectAutoSet   = strings.Join(stringx.Remove(userCouponsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userCouponsRowsWithPlaceHolder = strings.Join(stringx.Remove(userCouponsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userCouponsModel interface {
		Insert(ctx context.Context, data *UserCoupons) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UserCoupons, error)
		FindOneByUserIdCouponId(ctx context.Context, userId uint64, couponId string) (*UserCoupons, error)
		Update(ctx context.Context, data *UserCoupons) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUserCouponsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserCoupons struct {
		Id        uint64         `db:"id"`
		UserId    uint64         `db:"user_id"`    // 用户ID
		CouponId  string         `db:"coupon_id"`  // 优惠券ID
		Status    int64          `db:"status"`     // 状态：0-未使用 1-已使用 2-已过期
		OrderId   sql.NullString `db:"order_id"`   // 使用的订单ID
		UsedAt    sql.NullTime   `db:"used_at"`    // 使用时间
		CreatedAt time.Time      `db:"created_at"` // 创建时间
		UpdatedAt time.Time      `db:"updated_at"` // 更新时间
	}
)

func newUserCouponsModel(conn sqlx.SqlConn) *defaultUserCouponsModel {
	return &defaultUserCouponsModel{
		conn:  conn,
		table: "`user_coupons`",
	}
}

func (m *defaultUserCouponsModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserCouponsModel) FindOne(ctx context.Context, id uint64) (*UserCoupons, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userCouponsRows, m.table)
	var resp UserCoupons
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCouponsModel) FindOneByUserIdCouponId(ctx context.Context, userId uint64, couponId string) (*UserCoupons, error) {
	var resp UserCoupons
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `coupon_id` = ? limit 1", userCouponsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId, couponId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCouponsModel) Insert(ctx context.Context, data *UserCoupons) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userCouponsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.CouponId, data.Status, data.OrderId, data.UsedAt)
	return ret, err
}

func (m *defaultUserCouponsModel) Update(ctx context.Context, newData *UserCoupons) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userCouponsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserId, newData.CouponId, newData.Status, newData.OrderId, newData.UsedAt, newData.Id)
	return err
}

func (m *defaultUserCouponsModel) tableName() string {
	return m.table
}
