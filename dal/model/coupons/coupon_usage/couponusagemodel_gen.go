// Code generated by goctl. DO NOT EDIT.

package coupon_usage

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	couponUsageFieldNames          = builder.RawFieldNames(&CouponUsage{})
	couponUsageRows                = strings.Join(couponUsageFieldNames, ",")
	couponUsageRowsExpectAutoSet   = strings.Join(stringx.Remove(couponUsageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	couponUsageRowsWithPlaceHolder = strings.Join(stringx.Remove(couponUsageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	couponUsageModel interface {
		Insert(ctx context.Context, data *CouponUsage) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*CouponUsage, error)
		Update(ctx context.Context, data *CouponUsage) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultCouponUsageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CouponUsage struct {
		Id             uint64    `db:"id"`
		OrderId        string    `db:"order_id"`        // 关联的订单ID
		CouponId       string    `db:"coupon_id"`       // 优惠券ID
		UserId         uint64    `db:"user_id"`         // 用户ID
		CouponType     int64     `db:"coupon_type"`     // 当时优惠券类型：1-满减 2-折扣 3-立减
		OriginValue    int64     `db:"origin_value"`    // 当时优惠值（根据类型：分/百分比）
		DiscountAmount int64     `db:"discount_amount"` // 抵扣金额（分）
		AppliedAt      time.Time `db:"applied_at"`      // 应用时间
	}
)

func newCouponUsageModel(conn sqlx.SqlConn) *defaultCouponUsageModel {
	return &defaultCouponUsageModel{
		conn:  conn,
		table: "`coupon_usage`",
	}
}

func (m *defaultCouponUsageModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCouponUsageModel) FindOne(ctx context.Context, id uint64) (*CouponUsage, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", couponUsageRows, m.table)
	var resp CouponUsage
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCouponUsageModel) Insert(ctx context.Context, data *CouponUsage) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, couponUsageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.CouponId, data.UserId, data.CouponType, data.OriginValue, data.DiscountAmount, data.AppliedAt)
	return ret, err
}

func (m *defaultCouponUsageModel) Update(ctx context.Context, data *CouponUsage) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, couponUsageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.CouponId, data.UserId, data.CouponType, data.OriginValue, data.DiscountAmount, data.AppliedAt, data.Id)
	return err
}

func (m *defaultCouponUsageModel) tableName() string {
	return m.table
}
