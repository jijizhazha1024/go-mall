// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package checkout

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	checkoutsFieldNames          = builder.RawFieldNames(&Checkouts{})
	checkoutsRows                = strings.Join(checkoutsFieldNames, ",")
	checkoutsRowsExpectAutoSet   = strings.Join(stringx.Remove(checkoutsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	checkoutsRowsWithPlaceHolder = strings.Join(stringx.Remove(checkoutsFieldNames, "`pre_order_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	checkoutsModel interface {
		Insert(ctx context.Context, data *Checkouts) (sql.Result, error)
		FindOne(ctx context.Context, preOrderId string) (*Checkouts, error)
		Update(ctx context.Context, data *Checkouts) error
		Delete(ctx context.Context, preOrderId string) error
	}

	defaultCheckoutsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Checkouts struct {
		PreOrderId     string         `db:"pre_order_id"`    // 预订单ID
		UserId         uint64         `db:"user_id"`         // 用户ID
		CouponId       sql.NullString `db:"coupon_id"`       // 使用优惠券ID列表（支持多券）
		OriginalAmount int64          `db:"original_amount"` // 原始金额（单位：分）
		FinalAmount    int64          `db:"final_amount"`    // 实付金额（单位：分）
		Status         int64          `db:"status"`          // 状态：0-预占中 1-已确认 2-已取消 3-已过期
		ExpireTime     int64          `db:"expire_time"`     // 过期时间戳（秒）
		CreatedAt      time.Time      `db:"created_at"`      // 创建时间（毫秒精度）
		UpdatedAt      time.Time      `db:"updated_at"`      // 更新时间
	}
)

func newCheckoutsModel(conn sqlx.SqlConn) *defaultCheckoutsModel {
	return &defaultCheckoutsModel{
		conn:  conn,
		table: "`checkouts`",
	}
}

func (m *defaultCheckoutsModel) Delete(ctx context.Context, preOrderId string) error {
	query := fmt.Sprintf("delete from %s where `pre_order_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, preOrderId)
	return err
}

func (m *defaultCheckoutsModel) FindOne(ctx context.Context, preOrderId string) (*Checkouts, error) {
	query := fmt.Sprintf("select %s from %s where `pre_order_id` = ? limit 1", checkoutsRows, m.table)
	var resp Checkouts
	err := m.conn.QueryRowCtx(ctx, &resp, query, preOrderId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCheckoutsModel) Insert(ctx context.Context, data *Checkouts) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, checkoutsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.PreOrderId, data.UserId, data.CouponId, data.OriginalAmount, data.FinalAmount, data.Status, data.ExpireTime)
	return ret, err
}

func (m *defaultCheckoutsModel) Update(ctx context.Context, data *Checkouts) error {
	query := fmt.Sprintf("update %s set %s where `pre_order_id` = ?", m.table, checkoutsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.CouponId, data.OriginalAmount, data.FinalAmount, data.Status, data.ExpireTime, data.PreOrderId)
	return err
}

func (m *defaultCheckoutsModel) tableName() string {
	return m.table
}
