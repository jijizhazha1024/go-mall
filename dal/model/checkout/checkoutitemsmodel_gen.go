// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package checkout

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	checkoutItemsFieldNames          = builder.RawFieldNames(&CheckoutItems{})
	checkoutItemsRows                = strings.Join(checkoutItemsFieldNames, ",")
	checkoutItemsRowsExpectAutoSet   = strings.Join(stringx.Remove(checkoutItemsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	checkoutItemsRowsWithPlaceHolder = strings.Join(stringx.Remove(checkoutItemsFieldNames, "`pre_order_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	checkoutItemsModel interface {
		Insert(ctx context.Context, data *CheckoutItems) (sql.Result, error)
		FindOne(ctx context.Context, preOrderId string) (*CheckoutItems, error)
		Update(ctx context.Context, data *CheckoutItems) error
		Delete(ctx context.Context, preOrderId string) error
	}

	defaultCheckoutItemsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CheckoutItems struct {
		PreOrderId string    `db:"pre_order_id"` // 预订单ID
		ProductId  uint64    `db:"product_id"`   // 商品ID
		Quantity   uint64    `db:"quantity"`     // 数量
		Price      int64     `db:"price"`        // 当时单价（分）
		Snapshot   string    `db:"snapshot"`     // 商品快照（名称、规格等）
		CreatedAt  time.Time `db:"created_at"`
	}
)

func newCheckoutItemsModel(conn sqlx.SqlConn) *defaultCheckoutItemsModel {
	return &defaultCheckoutItemsModel{
		conn:  conn,
		table: "`checkout_items`",
	}
}

func (m *defaultCheckoutItemsModel) Delete(ctx context.Context, preOrderId string) error {
	query := fmt.Sprintf("delete from %s where `pre_order_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, preOrderId)
	return err
}

func (m *defaultCheckoutItemsModel) FindOne(ctx context.Context, preOrderId string) (*CheckoutItems, error) {
	query := fmt.Sprintf("select %s from %s where `pre_order_id` = ? limit 1", checkoutItemsRows, m.table)
	var resp CheckoutItems
	err := m.conn.QueryRowCtx(ctx, &resp, query, preOrderId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCheckoutItemsModel) Insert(ctx context.Context, data *CheckoutItems) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, checkoutItemsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.PreOrderId, data.ProductId, data.Quantity, data.Price, data.Snapshot)
	return ret, err
}

func (m *defaultCheckoutItemsModel) Update(ctx context.Context, data *CheckoutItems) error {
	query := fmt.Sprintf("update %s set %s where `pre_order_id` = ?", m.table, checkoutItemsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ProductId, data.Quantity, data.Price, data.Snapshot, data.PreOrderId)
	return err
}

func (m *defaultCheckoutItemsModel) tableName() string {
	return m.table
}
