// Code generated by goctl. DO NOT EDIT.

package payment

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	paymentsFieldNames          = builder.RawFieldNames(&Payments{})
	paymentsRows                = strings.Join(paymentsFieldNames, ",")
	paymentsRowsExpectAutoSet   = strings.Join(stringx.Remove(paymentsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	paymentsRowsWithPlaceHolder = strings.Join(stringx.Remove(paymentsFieldNames, "`payment_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	paymentsModel interface {
		Insert(ctx context.Context, data *Payments) (sql.Result, error)
		FindOne(ctx context.Context, paymentId string) (*Payments, error)
		Update(ctx context.Context, data *Payments) error
		Delete(ctx context.Context, paymentId string) error
	}

	defaultPaymentsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Payments struct {
		PaymentId      string         `db:"payment_id"`      // 支付单ID（UUID）
		PreOrderId     string         `db:"pre_order_id"`    // 预订单ID（外键）
		OrderId        sql.NullString `db:"order_id"`        // 关联订单ID（支付成功后更新）
		UserId         uint64         `db:"user_id"`         // 用户ID
		OriginalAmount int64          `db:"original_amount"` // 订单原价（单位：分）
		PaidAmount     sql.NullInt64  `db:"paid_amount"`     // 实付金额（分）
		PaymentMethod  string         `db:"payment_method"`  // 支付渠道（wx_pay/alipay）
		TransactionId  sql.NullString `db:"transaction_id"`  // 支付平台交易号
		PayUrl         string         `db:"pay_url"`         // 支付跳转链接
		ExpireTime     int64          `db:"expire_time"`     // 支付链接过期时间戳（秒）
		Status         int64          `db:"status"`          // 支付状态（0-未定义 1-待支付 2-已支付...）
		CreatedAt      time.Time      `db:"created_at"`      // 创建时间（毫秒精度）
		UpdatedAt      time.Time      `db:"updated_at"`      // 更新时间
		PaidAt         sql.NullInt64  `db:"paid_at"`         // 支付成功时间戳（秒）
	}
)

func newPaymentsModel(conn sqlx.SqlConn) *defaultPaymentsModel {
	return &defaultPaymentsModel{
		conn:  conn,
		table: "`payments`",
	}
}

func (m *defaultPaymentsModel) Delete(ctx context.Context, paymentId string) error {
	query := fmt.Sprintf("delete from %s where `payment_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, paymentId)
	return err
}

func (m *defaultPaymentsModel) FindOne(ctx context.Context, paymentId string) (*Payments, error) {
	query := fmt.Sprintf("select %s from %s where `payment_id` = ? limit 1", paymentsRows, m.table)
	var resp Payments
	err := m.conn.QueryRowCtx(ctx, &resp, query, paymentId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentsModel) Insert(ctx context.Context, data *Payments) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, paymentsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.PaymentId, data.PreOrderId, data.OrderId, data.UserId, data.OriginalAmount, data.PaidAmount, data.PaymentMethod, data.TransactionId, data.PayUrl, data.ExpireTime, data.Status, data.PaidAt)
	return ret, err
}

func (m *defaultPaymentsModel) Update(ctx context.Context, data *Payments) error {
	query := fmt.Sprintf("update %s set %s where `payment_id` = ?", m.table, paymentsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.PreOrderId, data.OrderId, data.UserId, data.OriginalAmount, data.PaidAmount, data.PaymentMethod, data.TransactionId, data.PayUrl, data.ExpireTime, data.Status, data.PaidAt, data.PaymentId)
	return err
}

func (m *defaultPaymentsModel) tableName() string {
	return m.table
}
