// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.5

package inventory_lock

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	inventoryLockFieldNames          = builder.RawFieldNames(&InventoryLock{})
	inventoryLockRows                = strings.Join(inventoryLockFieldNames, ",")
	inventoryLockRowsExpectAutoSet   = strings.Join(stringx.Remove(inventoryLockFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	inventoryLockRowsWithPlaceHolder = strings.Join(stringx.Remove(inventoryLockFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	inventoryLockModel interface {
		Insert(ctx context.Context, data *InventoryLock) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*InventoryLock, error)
		FindOneByOrderIdUserId(ctx context.Context, orderId string, userId uint64) (*InventoryLock, error)
		Update(ctx context.Context, data *InventoryLock) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultInventoryLockModel struct {
		conn  sqlx.SqlConn
		table string
	}

	InventoryLock struct {
		Id        uint64    `db:"id"`         // 自增主键
		OrderId   string    `db:"order_id"`   // 唯一订单ID
		UserId    uint64    `db:"user_id"`    // 用户ID
		CreatedAt time.Time `db:"created_at"` // 创建时间
	}
)

func newInventoryLockModel(conn sqlx.SqlConn) *defaultInventoryLockModel {
	return &defaultInventoryLockModel{
		conn:  conn,
		table: "`inventory_lock`",
	}
}

func (m *defaultInventoryLockModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultInventoryLockModel) FindOne(ctx context.Context, id uint64) (*InventoryLock, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", inventoryLockRows, m.table)
	var resp InventoryLock
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInventoryLockModel) FindOneByOrderIdUserId(ctx context.Context, orderId string, userId uint64) (*InventoryLock, error) {
	var resp InventoryLock
	query := fmt.Sprintf("select %s from %s where `order_id` = ? and `user_id` = ? limit 1", inventoryLockRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, orderId, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultInventoryLockModel) Insert(ctx context.Context, data *InventoryLock) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, inventoryLockRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.UserId)
	return ret, err
}

func (m *defaultInventoryLockModel) Update(ctx context.Context, newData *InventoryLock) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, inventoryLockRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.OrderId, newData.UserId, newData.Id)
	return err
}

func (m *defaultInventoryLockModel) tableName() string {
	return m.table
}
