// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.5

package orders

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ordersFieldNames          = builder.RawFieldNames(&Orders{})
	ordersRows                = strings.Join(ordersFieldNames, ",")
	ordersRowsExpectAutoSet   = strings.Join(stringx.Remove(ordersFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	ordersRowsWithPlaceHolder = strings.Join(stringx.Remove(ordersFieldNames, "`order_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheOrdersOrderIdPrefix    = "cache:orders:orderId:"
	cacheOrdersPreOrderIdPrefix = "cache:orders:preOrderId:"
)

type (
	ordersModel interface {
		Insert(ctx context.Context, data *Orders) (sql.Result, error)
		FindOne(ctx context.Context, orderId string) (*Orders, error)
		FindOneByPreOrderId(ctx context.Context, preOrderId string) (*Orders, error)
		Update(ctx context.Context, data *Orders) error
		Delete(ctx context.Context, orderId string) error
	}

	defaultOrdersModel struct {
		sqlc.CachedConn
		table string
	}

	Orders struct {
		OrderId        string         `db:"order_id"`        // 订单ID（业务主键）
		PreOrderId     string         `db:"pre_order_id"`    // 预订单ID（关联结算服务）
		UserId         uint64         `db:"user_id"`         // 用户ID
		PaymentMethod  sql.NullInt64  `db:"payment_method"`  // 支付方式（1-微信 2-支付宝）
		TransactionId  sql.NullString `db:"transaction_id"`  // 支付平台流水号
		PaidAt         sql.NullInt64  `db:"paid_at"`         // 支付成功时间戳（秒）
		OriginalAmount int64          `db:"original_amount"` // 订单原始金额（分）
		DiscountAmount int64          `db:"discount_amount"` // 优惠总金额（分）
		PayableAmount  int64          `db:"payable_amount"`  // 应付金额（分）
		PaidAmount     sql.NullInt64  `db:"paid_amount"`     // 实收金额（分）
		OrderStatus    int64          `db:"order_status"`    // 订单状态：1-待支付 2-已支付 3-已发货 4-已完成 5-已取消...
		PaymentStatus  int64          `db:"payment_status"`  // 支付状态：0-未支付 1-支付中 2-已支付 3-已退款...
		Reason         sql.NullString `db:"reason"`          // 取消原因
		ExpireTime     int64          `db:"expire_time"`     // 过期时间戳
		CreatedAt      time.Time      `db:"created_at"`      // 创建时间
		UpdatedAt      time.Time      `db:"updated_at"`      // 更新时间
	}
)

func newOrdersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrdersModel {
	return &defaultOrdersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`orders`",
	}
}

func (m *defaultOrdersModel) Delete(ctx context.Context, orderId string) error {
	data, err := m.FindOne(ctx, orderId)
	if err != nil {
		return err
	}

	ordersOrderIdKey := fmt.Sprintf("%s%v", cacheOrdersOrderIdPrefix, orderId)
	ordersPreOrderIdKey := fmt.Sprintf("%s%v", cacheOrdersPreOrderIdPrefix, data.PreOrderId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `order_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, orderId)
	}, ordersOrderIdKey, ordersPreOrderIdKey)
	return err
}

func (m *defaultOrdersModel) FindOne(ctx context.Context, orderId string) (*Orders, error) {
	ordersOrderIdKey := fmt.Sprintf("%s%v", cacheOrdersOrderIdPrefix, orderId)
	var resp Orders
	err := m.QueryRowCtx(ctx, &resp, ordersOrderIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", ordersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, orderId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) FindOneByPreOrderId(ctx context.Context, preOrderId string) (*Orders, error) {
	ordersPreOrderIdKey := fmt.Sprintf("%s%v", cacheOrdersPreOrderIdPrefix, preOrderId)
	var resp Orders
	err := m.QueryRowIndexCtx(ctx, &resp, ordersPreOrderIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `pre_order_id` = ? limit 1", ordersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, preOrderId); err != nil {
			return nil, err
		}
		return resp.OrderId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) Insert(ctx context.Context, data *Orders) (sql.Result, error) {
	ordersOrderIdKey := fmt.Sprintf("%s%v", cacheOrdersOrderIdPrefix, data.OrderId)
	ordersPreOrderIdKey := fmt.Sprintf("%s%v", cacheOrdersPreOrderIdPrefix, data.PreOrderId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, ordersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderId, data.PreOrderId, data.UserId, data.PaymentMethod, data.TransactionId, data.PaidAt, data.OriginalAmount, data.DiscountAmount, data.PayableAmount, data.PaidAmount, data.OrderStatus, data.PaymentStatus, data.Reason, data.ExpireTime)
	}, ordersOrderIdKey, ordersPreOrderIdKey)
	return ret, err
}

func (m *defaultOrdersModel) Update(ctx context.Context, newData *Orders) error {
	data, err := m.FindOne(ctx, newData.OrderId)
	if err != nil {
		return err
	}

	ordersOrderIdKey := fmt.Sprintf("%s%v", cacheOrdersOrderIdPrefix, data.OrderId)
	ordersPreOrderIdKey := fmt.Sprintf("%s%v", cacheOrdersPreOrderIdPrefix, data.PreOrderId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `order_id` = ?", m.table, ordersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.PreOrderId, newData.UserId, newData.PaymentMethod, newData.TransactionId, newData.PaidAt, newData.OriginalAmount, newData.DiscountAmount, newData.PayableAmount, newData.PaidAmount, newData.OrderStatus, newData.PaymentStatus, newData.Reason, newData.ExpireTime, newData.OrderId)
	}, ordersOrderIdKey, ordersPreOrderIdKey)
	return err
}

func (m *defaultOrdersModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOrdersOrderIdPrefix, primary)
}

func (m *defaultOrdersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", ordersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrdersModel) tableName() string {
	return m.table
}
