// Code generated by goctl. DO NOT EDIT.

package order

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderAddressesFieldNames          = builder.RawFieldNames(&OrderAddresses{})
	orderAddressesRows                = strings.Join(orderAddressesFieldNames, ",")
	orderAddressesRowsExpectAutoSet   = strings.Join(stringx.Remove(orderAddressesFieldNames, "`address_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderAddressesRowsWithPlaceHolder = strings.Join(stringx.Remove(orderAddressesFieldNames, "`address_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	orderAddressesModel interface {
		Insert(ctx context.Context, data *OrderAddresses) (sql.Result, error)
		FindOne(ctx context.Context, addressId uint64) (*OrderAddresses, error)
		FindOneByOrderId(ctx context.Context, orderId string) (*OrderAddresses, error)
		Update(ctx context.Context, data *OrderAddresses) error
		Delete(ctx context.Context, addressId uint64) error
	}

	defaultOrderAddressesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	OrderAddresses struct {
		OrderId         string         `db:"order_id"` // 订单ID
		AddressId       uint64         `db:"address_id"`
		RecipientName   string         `db:"recipient_name"`   // 收件人姓名
		PhoneNumber     sql.NullString `db:"phone_number"`     // 联系电话
		Province        sql.NullString `db:"province"`         // 州/省
		City            string         `db:"city"`             // 城市
		DetailedAddress string         `db:"detailed_address"` // 详细地址
		CreatedAt       time.Time      `db:"created_at"`       // 创建时间
		UpdatedAt       time.Time      `db:"updated_at"`       // 更新时间
	}
)

func newOrderAddressesModel(conn sqlx.SqlConn) *defaultOrderAddressesModel {
	return &defaultOrderAddressesModel{
		conn:  conn,
		table: "`order_addresses`",
	}
}

func (m *defaultOrderAddressesModel) Delete(ctx context.Context, addressId uint64) error {
	query := fmt.Sprintf("delete from %s where `address_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, addressId)
	return err
}

func (m *defaultOrderAddressesModel) FindOne(ctx context.Context, addressId uint64) (*OrderAddresses, error) {
	query := fmt.Sprintf("select %s from %s where `address_id` = ? limit 1", orderAddressesRows, m.table)
	var resp OrderAddresses
	err := m.conn.QueryRowCtx(ctx, &resp, query, addressId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderAddressesModel) FindOneByOrderId(ctx context.Context, orderId string) (*OrderAddresses, error) {
	var resp OrderAddresses
	query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", orderAddressesRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, orderId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderAddressesModel) Insert(ctx context.Context, data *OrderAddresses) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, orderAddressesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrderId, data.RecipientName, data.PhoneNumber, data.Province, data.City, data.DetailedAddress)
	return ret, err
}

func (m *defaultOrderAddressesModel) Update(ctx context.Context, newData *OrderAddresses) error {
	query := fmt.Sprintf("update %s set %s where `address_id` = ?", m.table, orderAddressesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.OrderId, newData.RecipientName, newData.PhoneNumber, newData.Province, newData.City, newData.DetailedAddress, newData.AddressId)
	return err
}

func (m *defaultOrderAddressesModel) tableName() string {
	return m.table
}
