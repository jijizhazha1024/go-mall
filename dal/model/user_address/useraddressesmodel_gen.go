// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.5

package user_address

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userAddressesFieldNames          = builder.RawFieldNames(&UserAddresses{})
	userAddressesRows                = strings.Join(userAddressesFieldNames, ",")
	userAddressesRowsExpectAutoSet   = strings.Join(stringx.Remove(userAddressesFieldNames, "`address_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userAddressesRowsWithPlaceHolder = strings.Join(stringx.Remove(userAddressesFieldNames, "`address_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userAddressesModel interface {
		Insert(ctx context.Context, data *UserAddresses) (sql.Result, error)
		FindOne(ctx context.Context, addressId int32) (*UserAddresses, error)
		Update(ctx context.Context, data *UserAddresses)(sql.Result, error)
		Delete(ctx context.Context, addressId int32) error
	}

	defaultUserAddressesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserAddresses struct {
		AddressId       int64          `db:"address_id"`       // 主键，自增，地址ID
		UserId          int64          `db:"user_id"`          // 外键，关联到users表的user_id
		DetailedAddress string         `db:"detailed_address"` // 详细地址
		City            string         `db:"city"`             // 城市
		Province        sql.NullString `db:"province"`         // 州/省
		IsDefault       bool           `db:"is_default"`       // 是否默认地址
		RecipientName   string         `db:"recipient_name"`   // 收件人姓名
		PhoneNumber     sql.NullString `db:"phone_number"`     // 联系电话
		CreatedAt       time.Time      `db:"created_at"`       // 创建时间
		UpdatedAt       time.Time      `db:"updated_at"`       // 更新时间
	}
)

func newUserAddressesModel(conn sqlx.SqlConn) *defaultUserAddressesModel {
	return &defaultUserAddressesModel{
		conn:  conn,
		table: "`user_addresses`",
	}
}

func (m *defaultUserAddressesModel) Delete(ctx context.Context, addressId int32) error{
	query := fmt.Sprintf("delete from %s where `address_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, addressId)
	return err	
}

func (m *defaultUserAddressesModel) FindOne(ctx context.Context, addressId int32) (*UserAddresses, error) {
	query := fmt.Sprintf("select %s from %s where `address_id` = ? limit 1", userAddressesRows, m.table)
	var resp UserAddresses
	err := m.conn.QueryRowCtx(ctx, &resp, query, addressId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAddressesModel) Insert(ctx context.Context, data *UserAddresses) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, userAddressesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.DetailedAddress, data.City, data.Province, data.IsDefault, data.RecipientName, data.PhoneNumber)
	return ret, err
}

func (m *defaultUserAddressesModel) Update(ctx context.Context, data *UserAddresses)(sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `address_id` = ?", m.table, userAddressesRowsWithPlaceHolder)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.DetailedAddress, data.City, data.Province, data.IsDefault, data.RecipientName, data.PhoneNumber, data.AddressId)
	return ret, err
}

func (m *defaultUserAddressesModel) tableName() string {
	return m.table
}
