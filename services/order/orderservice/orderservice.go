// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package orderservice

import (
	"context"

	"jijizhazha1024/go-mall/services/order/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CancelOrderRequest                  = order.CancelOrderRequest
	CreateOrderRequest                  = order.CreateOrderRequest
	EmptyRes                            = order.EmptyRes
	GetOrderRequest                     = order.GetOrderRequest
	ListOrdersRequest                   = order.ListOrdersRequest
	ListOrdersRequest_OrderStatusFilter = order.ListOrdersRequest_OrderStatusFilter
	ListOrdersRequest_Pagination        = order.ListOrdersRequest_Pagination
	ListOrdersResponse                  = order.ListOrdersResponse
	Order                               = order.Order
	OrderAddress                        = order.OrderAddress
	OrderDetailResponse                 = order.OrderDetailResponse
	OrderItem                           = order.OrderItem
	OrderResponse                       = order.OrderResponse
	PaymentResult                       = order.PaymentResult
	UpdateOrder2PaymentRequest          = order.UpdateOrder2PaymentRequest
	UpdateOrder2PaymentSuccessRequest   = order.UpdateOrder2PaymentSuccessRequest

	OrderService interface {
		// CreateOrder 创建订单（需预先生成预订单）
		CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
		// CancelOrder 取消订单
		CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*EmptyRes, error)
		// UpdateOrder2Payment 更新订单（支付服务回调使用）
		UpdateOrder2Payment(ctx context.Context, in *UpdateOrder2PaymentRequest, opts ...grpc.CallOption) (*EmptyRes, error)
		// UpdateOrder2PaymentSuccess 支付成功时（进行修改订单状态）
		UpdateOrder2PaymentSuccess(ctx context.Context, in *UpdateOrder2PaymentSuccessRequest, opts ...grpc.CallOption) (*EmptyRes, error)
		// GetOrder 获取订单详情
		GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*OrderDetailResponse, error)
		// ListOrders 分页查询订单列表
		ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	}

	defaultOrderService struct {
		cli zrpc.Client
	}
)

func NewOrderService(cli zrpc.Client) OrderService {
	return &defaultOrderService{
		cli: cli,
	}
}

// CreateOrder 创建订单（需预先生成预订单）
func (m *defaultOrderService) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

// CancelOrder 取消订单
func (m *defaultOrderService) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*EmptyRes, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.CancelOrder(ctx, in, opts...)
}

// UpdateOrder2Payment 更新订单（支付服务回调使用）
func (m *defaultOrderService) UpdateOrder2Payment(ctx context.Context, in *UpdateOrder2PaymentRequest, opts ...grpc.CallOption) (*EmptyRes, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.UpdateOrder2Payment(ctx, in, opts...)
}

// UpdateOrder2PaymentSuccess 支付成功时（进行修改订单状态）
func (m *defaultOrderService) UpdateOrder2PaymentSuccess(ctx context.Context, in *UpdateOrder2PaymentSuccessRequest, opts ...grpc.CallOption) (*EmptyRes, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.UpdateOrder2PaymentSuccess(ctx, in, opts...)
}

// GetOrder 获取订单详情
func (m *defaultOrderService) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*OrderDetailResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.GetOrder(ctx, in, opts...)
}

// ListOrders 分页查询订单列表
func (m *defaultOrderService) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.ListOrders(ctx, in, opts...)
}
