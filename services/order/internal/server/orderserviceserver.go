// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5
// Source: order.proto

package server

import (
	"context"

	"jijizhazha1024/go-mall/services/order/internal/logic"
	"jijizhazha1024/go-mall/services/order/internal/svc"
	"jijizhazha1024/go-mall/services/order/order"
)

type OrderServiceServer struct {
	svcCtx *svc.ServiceContext
	order.UnimplementedOrderServiceServer
}

func NewOrderServiceServer(svcCtx *svc.ServiceContext) *OrderServiceServer {
	return &OrderServiceServer{
		svcCtx: svcCtx,
	}
}

// 创建订单（需预先生成预订单）
func (s *OrderServiceServer) CreateOrder(ctx context.Context, in *order.CreateOrderRequest) (*order.OrderResponse, error) {
	l := logic.NewCreateOrderLogic(ctx, s.svcCtx)
	return l.CreateOrder(in)
}

// 取消订单
func (s *OrderServiceServer) CancelOrder(ctx context.Context, in *order.CancelOrderRequest) (*order.EmptyRes, error) {
	l := logic.NewCancelOrderLogic(ctx, s.svcCtx)
	return l.CancelOrder(in)
}

// 更新订单（支付服务回调使用）
func (s *OrderServiceServer) UpdateOrder2Payment(ctx context.Context, in *order.UpdateOrder2PaymentRequest) (*order.EmptyRes, error) {
	l := logic.NewUpdateOrder2PaymentLogic(ctx, s.svcCtx)
	return l.UpdateOrder2Payment(in)
}

// 支付成功时（进行修改订单状态）
func (s *OrderServiceServer) UpdateOrder2PaymentSuccess(ctx context.Context, in *order.UpdateOrder2PaymentSuccessRequest) (*order.EmptyRes, error) {
	l := logic.NewUpdateOrder2PaymentSuccessLogic(ctx, s.svcCtx)
	return l.UpdateOrder2PaymentSuccess(in)
}

// 获取订单详情
func (s *OrderServiceServer) GetOrder(ctx context.Context, in *order.GetOrderRequest) (*order.OrderDetailResponse, error) {
	l := logic.NewGetOrderLogic(ctx, s.svcCtx)
	return l.GetOrder(in)
}

// 分页查询订单列表
func (s *OrderServiceServer) ListOrders(ctx context.Context, in *order.ListOrdersRequest) (*order.ListOrdersResponse, error) {
	l := logic.NewListOrdersLogic(ctx, s.svcCtx)
	return l.ListOrders(in)
}
