// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package server

import (
	"context"

	"jijizhazha1024/go-mall/services/order/internal/logic"
	"jijizhazha1024/go-mall/services/order/internal/svc"
	"jijizhazha1024/go-mall/services/order/order"
)

type OrderServiceServer struct {
	svcCtx *svc.ServiceContext
	order.UnimplementedOrderServiceServer
}

func NewOrderServiceServer(svcCtx *svc.ServiceContext) *OrderServiceServer {
	return &OrderServiceServer{
		svcCtx: svcCtx,
	}
}

// CreateOrder 创建订单
func (s *OrderServiceServer) CreateOrder(ctx context.Context, in *order.CreateOrderRequest) (*order.OrderDetailResponse, error) {
	l := logic.NewCreateOrderLogic(ctx, s.svcCtx)
	return l.CreateOrder(in)
}

// CreateOrderRollback 补偿操作
func (s *OrderServiceServer) CreateOrderRollback(ctx context.Context, in *order.CreateOrderRequest) (*order.EmptyRes, error) {
	l := logic.NewCreateOrderRollbackLogic(ctx, s.svcCtx)
	return l.CreateOrderRollback(in)
}

// CancelOrder 取消订单 由用户发起
func (s *OrderServiceServer) CancelOrder(ctx context.Context, in *order.CancelOrderRequest) (*order.EmptyRes, error) {
	l := logic.NewCancelOrderLogic(ctx, s.svcCtx)
	return l.CancelOrder(in)
}

// GetOrder 获取订单详情
func (s *OrderServiceServer) GetOrder(ctx context.Context, in *order.GetOrderRequest) (*order.OrderDetailResponse, error) {
	l := logic.NewGetOrderLogic(ctx, s.svcCtx)
	return l.GetOrder(in)
}

// ListOrders 分页查询订单列表
func (s *OrderServiceServer) ListOrders(ctx context.Context, in *order.ListOrdersRequest) (*order.ListOrdersResponse, error) {
	l := logic.NewListOrdersLogic(ctx, s.svcCtx)
	return l.ListOrders(in)
}

// --------------- 支付服务内部接口 ---------------
func (s *OrderServiceServer) UpdateOrder2PaymentSuccess(ctx context.Context, in *order.UpdateOrder2PaymentSuccessRequest) (*order.EmptyRes, error) {
	l := logic.NewUpdateOrder2PaymentSuccessLogic(ctx, s.svcCtx)
	return l.UpdateOrder2PaymentSuccess(in)
}

// UpdateOrder2PaymentSuccessRollback 支付失败的补充操作
func (s *OrderServiceServer) UpdateOrder2PaymentSuccessRollback(ctx context.Context, in *order.UpdateOrder2PaymentSuccessRequest) (*order.EmptyRes, error) {
	l := logic.NewUpdateOrder2PaymentSuccessRollbackLogic(ctx, s.svcCtx)
	return l.UpdateOrder2PaymentSuccessRollback(in)
}

// UpdateOrder2Payment 更新订单（支付服务回调使用） 更新为支付中
func (s *OrderServiceServer) UpdateOrder2PaymentStatus(ctx context.Context, in *order.UpdateOrder2PaymentRequest) (*order.EmptyRes, error) {
	l := logic.NewUpdateOrder2PaymentStatusLogic(ctx, s.svcCtx)
	return l.UpdateOrder2PaymentStatus(in)
}

// UpdateOrder2PaymentStatusRollback 补偿操作 更新订单（支付服务回调使用） 创建状态
func (s *OrderServiceServer) UpdateOrder2PaymentStatusRollback(ctx context.Context, in *order.UpdateOrder2PaymentRequest) (*order.EmptyRes, error) {
	l := logic.NewUpdateOrder2PaymentStatusRollbackLogic(ctx, s.svcCtx)
	return l.UpdateOrder2PaymentStatusRollback(in)
}

func (s *OrderServiceServer) GetOrder2Payment(ctx context.Context, in *order.GetOrderRequest) (*order.OrderDetail2PaymentResponse, error) {
	l := logic.NewGetOrder2PaymentLogic(ctx, s.svcCtx)
	return l.GetOrder2Payment(in)
}
