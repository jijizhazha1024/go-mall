// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5
// Source: inventory.proto

package inventoryclient

import (
	"context"

	"jijizhazha1024/go-mall/services/inventory/inventory"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetInventoryReq  = inventory.GetInventoryReq
	GetInventoryResp = inventory.GetInventoryResp
	InventoryReq     = inventory.InventoryReq
	InventoryResp    = inventory.InventoryResp

	Inventory interface {
		// GetInventory 查询库存，缓存不在，再去数据库查
		GetInventory(ctx context.Context, in *GetInventoryReq, opts ...grpc.CallOption) (*GetInventoryResp, error)
		// UpdateInventory 增加库存，修改库存数量（直接修改）
		UpdateInventory(ctx context.Context, in *InventoryReq, opts ...grpc.CallOption) (*InventoryResp, error)
		// DecreaseInventory 预扣减库存，此时并非真实扣除库存，而是在缓存进行--操作
		DecreasePreInventory(ctx context.Context, in *InventoryReq, opts ...grpc.CallOption) (*InventoryResp, error)
		// DecreaseInventory 真实扣减库存（支付成功时）
		DecreaseInventory(ctx context.Context, in *InventoryReq, opts ...grpc.CallOption) (*InventoryResp, error)
		// ReturnPreInventory 退还预扣减的库存（）
		ReturnPreInventory(ctx context.Context, in *InventoryReq, opts ...grpc.CallOption) (*InventoryResp, error)
	}

	defaultInventory struct {
		cli zrpc.Client
	}
)

func NewInventory(cli zrpc.Client) Inventory {
	return &defaultInventory{
		cli: cli,
	}
}

// GetInventory 查询库存，缓存不在，再去数据库查
func (m *defaultInventory) GetInventory(ctx context.Context, in *GetInventoryReq, opts ...grpc.CallOption) (*GetInventoryResp, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.GetInventory(ctx, in, opts...)
}

// UpdateInventory 增加库存，修改库存数量（直接修改）
func (m *defaultInventory) UpdateInventory(ctx context.Context, in *InventoryReq, opts ...grpc.CallOption) (*InventoryResp, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.UpdateInventory(ctx, in, opts...)
}

// DecreaseInventory 预扣减库存，此时并非真实扣除库存，而是在缓存进行--操作
func (m *defaultInventory) DecreasePreInventory(ctx context.Context, in *InventoryReq, opts ...grpc.CallOption) (*InventoryResp, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.DecreasePreInventory(ctx, in, opts...)
}

// DecreaseInventory 真实扣减库存（支付成功时）
func (m *defaultInventory) DecreaseInventory(ctx context.Context, in *InventoryReq, opts ...grpc.CallOption) (*InventoryResp, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.DecreaseInventory(ctx, in, opts...)
}

// ReturnPreInventory 退还预扣减的库存（）
func (m *defaultInventory) ReturnPreInventory(ctx context.Context, in *InventoryReq, opts ...grpc.CallOption) (*InventoryResp, error) {
	client := inventory.NewInventoryClient(m.cli.Conn())
	return client.ReturnPreInventory(ctx, in, opts...)
}
