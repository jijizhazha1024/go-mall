// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: coupons.proto

package coupons

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Coupons_ListCoupons_FullMethodName      = "/coupons.Coupons/ListCoupons"
	Coupons_GetCoupon_FullMethodName        = "/coupons.Coupons/GetCoupon"
	Coupons_ClaimCoupon_FullMethodName      = "/coupons.Coupons/ClaimCoupon"
	Coupons_ListUserCoupons_FullMethodName  = "/coupons.Coupons/ListUserCoupons"
	Coupons_CalculateCoupon_FullMethodName  = "/coupons.Coupons/CalculateCoupon"
	Coupons_ListCouponUsages_FullMethodName = "/coupons.Coupons/ListCouponUsages"
	Coupons_LockCoupon_FullMethodName       = "/coupons.Coupons/LockCoupon"
	Coupons_ReleaseCoupon_FullMethodName    = "/coupons.Coupons/ReleaseCoupon"
	Coupons_UseCoupon_FullMethodName        = "/coupons.Coupons/UseCoupon"
)

// CouponsClient is the client API for Coupons service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 优惠券服务
type CouponsClient interface {
	// ListCoupons 获取优惠券列表
	ListCoupons(ctx context.Context, in *ListCouponsReq, opts ...grpc.CallOption) (*ListCouponsResp, error)
	// GetCoupon 获取单个优惠券
	GetCoupon(ctx context.Context, in *GetCouponReq, opts ...grpc.CallOption) (*GetCouponResp, error)
	// ClaimCoupon 用户领取优惠券
	ClaimCoupon(ctx context.Context, in *ClaimCouponReq, opts ...grpc.CallOption) (*ClaimCouponResp, error)
	// ListUserCoupons 获取用户优惠券列表
	ListUserCoupons(ctx context.Context, in *ListUserCouponsReq, opts ...grpc.CallOption) (*ListUserCouponsResp, error)
	// CalculateCoupon 计算优惠券
	CalculateCoupon(ctx context.Context, in *CalculateCouponReq, opts ...grpc.CallOption) (*CalculateCouponResp, error)
	// CalculateCouponByItems 计算优惠券通过商品列表。
	// ListCouponUsages 获取优惠券使用记录
	ListCouponUsages(ctx context.Context, in *ListCouponUsagesReq, opts ...grpc.CallOption) (*ListCouponUsagesResp, error)
	// --------------- 使用优惠券 --------------- pre_order_id来进行使用
	// 锁定优惠券（结算时预占）
	LockCoupon(ctx context.Context, in *LockCouponReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 释放优惠券（订单取消/超时释放）
	ReleaseCoupon(ctx context.Context, in *ReleaseCouponReq, opts ...grpc.CallOption) (*EmptyResp, error)
	// 使用优惠券（支付成功确认）
	UseCoupon(ctx context.Context, in *UseCouponReq, opts ...grpc.CallOption) (*EmptyResp, error)
}

type couponsClient struct {
	cc grpc.ClientConnInterface
}

func NewCouponsClient(cc grpc.ClientConnInterface) CouponsClient {
	return &couponsClient{cc}
}

func (c *couponsClient) ListCoupons(ctx context.Context, in *ListCouponsReq, opts ...grpc.CallOption) (*ListCouponsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCouponsResp)
	err := c.cc.Invoke(ctx, Coupons_ListCoupons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponsClient) GetCoupon(ctx context.Context, in *GetCouponReq, opts ...grpc.CallOption) (*GetCouponResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCouponResp)
	err := c.cc.Invoke(ctx, Coupons_GetCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponsClient) ClaimCoupon(ctx context.Context, in *ClaimCouponReq, opts ...grpc.CallOption) (*ClaimCouponResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimCouponResp)
	err := c.cc.Invoke(ctx, Coupons_ClaimCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponsClient) ListUserCoupons(ctx context.Context, in *ListUserCouponsReq, opts ...grpc.CallOption) (*ListUserCouponsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserCouponsResp)
	err := c.cc.Invoke(ctx, Coupons_ListUserCoupons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponsClient) CalculateCoupon(ctx context.Context, in *CalculateCouponReq, opts ...grpc.CallOption) (*CalculateCouponResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateCouponResp)
	err := c.cc.Invoke(ctx, Coupons_CalculateCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponsClient) ListCouponUsages(ctx context.Context, in *ListCouponUsagesReq, opts ...grpc.CallOption) (*ListCouponUsagesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCouponUsagesResp)
	err := c.cc.Invoke(ctx, Coupons_ListCouponUsages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponsClient) LockCoupon(ctx context.Context, in *LockCouponReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, Coupons_LockCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponsClient) ReleaseCoupon(ctx context.Context, in *ReleaseCouponReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, Coupons_ReleaseCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponsClient) UseCoupon(ctx context.Context, in *UseCouponReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, Coupons_UseCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouponsServer is the server API for Coupons service.
// All implementations must embed UnimplementedCouponsServer
// for forward compatibility
//
// 优惠券服务
type CouponsServer interface {
	// ListCoupons 获取优惠券列表
	ListCoupons(context.Context, *ListCouponsReq) (*ListCouponsResp, error)
	// GetCoupon 获取单个优惠券
	GetCoupon(context.Context, *GetCouponReq) (*GetCouponResp, error)
	// ClaimCoupon 用户领取优惠券
	ClaimCoupon(context.Context, *ClaimCouponReq) (*ClaimCouponResp, error)
	// ListUserCoupons 获取用户优惠券列表
	ListUserCoupons(context.Context, *ListUserCouponsReq) (*ListUserCouponsResp, error)
	// CalculateCoupon 计算优惠券
	CalculateCoupon(context.Context, *CalculateCouponReq) (*CalculateCouponResp, error)
	// CalculateCouponByItems 计算优惠券通过商品列表。
	// ListCouponUsages 获取优惠券使用记录
	ListCouponUsages(context.Context, *ListCouponUsagesReq) (*ListCouponUsagesResp, error)
	// --------------- 使用优惠券 --------------- pre_order_id来进行使用
	// 锁定优惠券（结算时预占）
	LockCoupon(context.Context, *LockCouponReq) (*EmptyResp, error)
	// 释放优惠券（订单取消/超时释放）
	ReleaseCoupon(context.Context, *ReleaseCouponReq) (*EmptyResp, error)
	// 使用优惠券（支付成功确认）
	UseCoupon(context.Context, *UseCouponReq) (*EmptyResp, error)
	mustEmbedUnimplementedCouponsServer()
}

// UnimplementedCouponsServer must be embedded to have forward compatible implementations.
type UnimplementedCouponsServer struct {
}

func (UnimplementedCouponsServer) ListCoupons(context.Context, *ListCouponsReq) (*ListCouponsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoupons not implemented")
}
func (UnimplementedCouponsServer) GetCoupon(context.Context, *GetCouponReq) (*GetCouponResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoupon not implemented")
}
func (UnimplementedCouponsServer) ClaimCoupon(context.Context, *ClaimCouponReq) (*ClaimCouponResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimCoupon not implemented")
}
func (UnimplementedCouponsServer) ListUserCoupons(context.Context, *ListUserCouponsReq) (*ListUserCouponsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserCoupons not implemented")
}
func (UnimplementedCouponsServer) CalculateCoupon(context.Context, *CalculateCouponReq) (*CalculateCouponResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateCoupon not implemented")
}
func (UnimplementedCouponsServer) ListCouponUsages(context.Context, *ListCouponUsagesReq) (*ListCouponUsagesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCouponUsages not implemented")
}
func (UnimplementedCouponsServer) LockCoupon(context.Context, *LockCouponReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockCoupon not implemented")
}
func (UnimplementedCouponsServer) ReleaseCoupon(context.Context, *ReleaseCouponReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCoupon not implemented")
}
func (UnimplementedCouponsServer) UseCoupon(context.Context, *UseCouponReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseCoupon not implemented")
}
func (UnimplementedCouponsServer) mustEmbedUnimplementedCouponsServer() {}

// UnsafeCouponsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouponsServer will
// result in compilation errors.
type UnsafeCouponsServer interface {
	mustEmbedUnimplementedCouponsServer()
}

func RegisterCouponsServer(s grpc.ServiceRegistrar, srv CouponsServer) {
	s.RegisterService(&Coupons_ServiceDesc, srv)
}

func _Coupons_ListCoupons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCouponsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponsServer).ListCoupons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupons_ListCoupons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponsServer).ListCoupons(ctx, req.(*ListCouponsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupons_GetCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponsServer).GetCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupons_GetCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponsServer).GetCoupon(ctx, req.(*GetCouponReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupons_ClaimCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimCouponReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponsServer).ClaimCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupons_ClaimCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponsServer).ClaimCoupon(ctx, req.(*ClaimCouponReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupons_ListUserCoupons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserCouponsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponsServer).ListUserCoupons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupons_ListUserCoupons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponsServer).ListUserCoupons(ctx, req.(*ListUserCouponsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupons_CalculateCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateCouponReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponsServer).CalculateCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupons_CalculateCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponsServer).CalculateCoupon(ctx, req.(*CalculateCouponReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupons_ListCouponUsages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCouponUsagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponsServer).ListCouponUsages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupons_ListCouponUsages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponsServer).ListCouponUsages(ctx, req.(*ListCouponUsagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupons_LockCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockCouponReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponsServer).LockCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupons_LockCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponsServer).LockCoupon(ctx, req.(*LockCouponReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupons_ReleaseCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCouponReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponsServer).ReleaseCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupons_ReleaseCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponsServer).ReleaseCoupon(ctx, req.(*ReleaseCouponReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupons_UseCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseCouponReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponsServer).UseCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupons_UseCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponsServer).UseCoupon(ctx, req.(*UseCouponReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Coupons_ServiceDesc is the grpc.ServiceDesc for Coupons service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coupons_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coupons.Coupons",
	HandlerType: (*CouponsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCoupons",
			Handler:    _Coupons_ListCoupons_Handler,
		},
		{
			MethodName: "GetCoupon",
			Handler:    _Coupons_GetCoupon_Handler,
		},
		{
			MethodName: "ClaimCoupon",
			Handler:    _Coupons_ClaimCoupon_Handler,
		},
		{
			MethodName: "ListUserCoupons",
			Handler:    _Coupons_ListUserCoupons_Handler,
		},
		{
			MethodName: "CalculateCoupon",
			Handler:    _Coupons_CalculateCoupon_Handler,
		},
		{
			MethodName: "ListCouponUsages",
			Handler:    _Coupons_ListCouponUsages_Handler,
		},
		{
			MethodName: "LockCoupon",
			Handler:    _Coupons_LockCoupon_Handler,
		},
		{
			MethodName: "ReleaseCoupon",
			Handler:    _Coupons_ReleaseCoupon_Handler,
		},
		{
			MethodName: "UseCoupon",
			Handler:    _Coupons_UseCoupon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coupons.proto",
}
