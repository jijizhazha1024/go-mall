syntax = "proto3";

package users;
option go_package="./users";

message Request {
  string ping = 1;
}

message Response {
  string pong = 1;
}

// 定义注册请求消息
message RegisterRequest {
  string email = 1;
  string password = 2;
  string confirm_password = 3;
}

// 定义注册响应消息
message RegisterResponse {
  uint32 status_code = 1; // 状态码，0-成功，其他值-失败
  string status_msg = 2; // 返回状态描述

  uint32 user_id = 3;
  

}

// 定义登录请求消息
message LoginRequest {
  string email = 1;
  string password = 2;
}

// 定义登录响应消息
message LoginResponse {
  uint32 status_code = 1; // 状态码，0-成功，其他值-失败
  string status_msg = 2; // 返回状态描述
  string user_name = 3;

  uint32 user_id = 4;
 
}

// 定义登出请求消息
message LogoutRequest {
  uint32 user_id = 1;

}

// 定义登出响应消息
message LogoutResponse {
  uint32 status_code = 1; // 状态码，0-成功，其他值-失败
  string status_msg = 2; // 返回状态描述



   int64    logout_time = 4; // 登出时间

}


// 定义删除用户请求消息
message DeleteUserRequest {
 uint32 user_id = 1;
}

// 定义删除用户响应消息
message DeleteUserResponse {
  uint32 status_code = 1; // 状态码，0-成功，其他值-失败
  string status_msg = 2; // 返回状态描述
 
  uint32 user_id = 3;
   
}


// 定义更新用户请求消息
message UpdateUserRequest {
uint32 user_id = 1;


  string usr_name = 2; // 可选，如果需要更新
}

// 定义更新用户响应消息
message UpdateUserResponse {
  uint32 status_code = 1; // 状态码，0-成功，其他值-失败
  string status_msg = 2; // 返回状态描述
  uint32 user_id = 3;
    string user_name = 4;
}


// 定义获取用户信息请求消息
message GetUserRequest {
uint32 user_id = 1;

}

// 定义获取用户信息响应消息
message GetUserResponse {
  uint32 status_code = 1; // 状态码，0-成功，其他值-失败
  string status_msg = 2; // 返回状态描述
  uint32 user_id = 3;
  string email = 4;
  string user_name = 5;
  string created_at = 6;
  string  updated_at = 7;
  string  logout_at = 8;
  string avatar_url = 9;

}

 
// 请求添加新地址的消息
message AddAddressRequest {
  string recipient_name = 1;
  string phone_number = 2;
  string province = 3;
  string city = 4;
  string detailed_address = 5;
  bool is_default = 6;
  uint32 user_id = 7;
}
 
// 添加新地址的响应消息
message AddAddressResponse {
  uint32 status_code = 1;
  string status_msg = 2;

  AddressData data = 3;
}
 
// 请求删除地址的消息
message DeleteAddressRequest {
  uint32 user_id = 1;
  int32 address_id = 2;
  
}
 
// 删除地址的响应消息
message DeleteAddressResponse {
  int32 status_code = 1;
  string status_msg = 2;
}
 
// 请求修改地址的消息
message UpdateAddressRequest {
  string recipient_name = 1;
  string phone_number = 2;
  string province = 3;
  string city = 4;
  string detailed_address = 5;
  bool is_default = 6;
  int32 address_id = 7;
  uint32 user_id = 8;
}
 
// 修改地址的响应消息
message UpdateAddressResponse {
  int32 status_code = 1;
  string status_msg = 2;
  AddressData data = 3;
}
 
// 获取所有地址的响应消息中的地址数据列表
message AddressListResponse {
  int32 status_code = 1;
  string status_msg = 2;
  repeated AddressData data = 3;
}
 
// 获取单个地址的响应消息
message GetAddressResponse {
  int32 status_code = 1;
  string status_msg = 2;
  AddressData data = 3;
}
 
// 地址数据消息
message AddressData {
  int32 address_id = 1;
  string recipient_name = 2;
  string phone_number = 3;
  string province = 4;
  string city = 5;
  string detailed_address = 6;
  bool is_default = 7;
  string  created_at = 8;
  string  updated_at = 9;
}


message AllAddressLitstRequest {
  uint32 user_id = 1;
}



message GetAddressRequest {
  uint32 user_id = 1;
  int32 address_id = 2;
}



service Users {
  rpc Ping(Request) returns(Response);

    // 注册方法
    rpc Register(RegisterRequest) returns (RegisterResponse);
    // 登录方法
    rpc Login(LoginRequest) returns (LoginResponse);
    // 登出方法
    rpc Logout(LogoutRequest) returns (LogoutResponse);
    // 删除用户方法
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
    // 更新用户方法
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
    // 获取用户信息方法
    rpc GetUser(GetUserRequest) returns (GetUserResponse);

    rpc AddAddress (AddAddressRequest) returns (AddAddressResponse);
  
    // 删除用户地址
    rpc DeleteAddress (DeleteAddressRequest) returns (DeleteAddressResponse);
    
    // 修改用户地址
    rpc UpdateAddress (UpdateAddressRequest) returns (UpdateAddressResponse);
    
    // 获取所有收货地址
    rpc ListAddresses (AllAddressLitstRequest) returns (AddressListResponse);
    
    // 获取单个收货地址
    rpc GetAddress (GetAddressRequest) returns (GetAddressResponse);


}
