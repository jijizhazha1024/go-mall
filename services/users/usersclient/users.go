// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5
// Source: users.proto

package usersclient

import (
	"context"

	"jijizhazha1024/go-mall/services/users/users"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddAddressRequest      = users.AddAddressRequest
	AddAddressResponse     = users.AddAddressResponse
	AddressData            = users.AddressData
	AddressListResponse    = users.AddressListResponse
	AllAddressLitstRequest = users.AllAddressLitstRequest
	DeleteAddressRequest   = users.DeleteAddressRequest
	DeleteAddressResponse  = users.DeleteAddressResponse
	DeleteUserRequest      = users.DeleteUserRequest
	DeleteUserResponse     = users.DeleteUserResponse
	GetAddressRequest      = users.GetAddressRequest
	GetAddressResponse     = users.GetAddressResponse
	GetUserRequest         = users.GetUserRequest
	GetUserResponse        = users.GetUserResponse
	LoginRequest           = users.LoginRequest
	LoginResponse          = users.LoginResponse
	LogoutRequest          = users.LogoutRequest
	LogoutResponse         = users.LogoutResponse
	RegisterRequest        = users.RegisterRequest
	RegisterResponse       = users.RegisterResponse
	Request                = users.Request
	Response               = users.Response
	UpdateAddressRequest   = users.UpdateAddressRequest
	UpdateAddressResponse  = users.UpdateAddressResponse
	UpdateUserRequest      = users.UpdateUserRequest
	UpdateUserResponse     = users.UpdateUserResponse

	Users interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		// 注册方法
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		// 登录方法
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		// 登出方法
		Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
		// 删除用户方法
		DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
		// 更新用户方法
		UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
		// 获取用户信息方法
		GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error)
		// 删除用户地址
		DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*DeleteAddressResponse, error)
		// 修改用户地址
		UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error)
		// 获取所有收货地址
		ListAddresses(ctx context.Context, in *AllAddressLitstRequest, opts ...grpc.CallOption) (*AddressListResponse, error)
		// 获取单个收货地址
		GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error)
	}

	defaultUsers struct {
		cli zrpc.Client
	}
)

func NewUsers(cli zrpc.Client) Users {
	return &defaultUsers{
		cli: cli,
	}
}

func (m *defaultUsers) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

// 注册方法
func (m *defaultUsers) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// 登录方法
func (m *defaultUsers) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 登出方法
func (m *defaultUsers) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

// 删除用户方法
func (m *defaultUsers) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

// 更新用户方法
func (m *defaultUsers) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

// 获取用户信息方法
func (m *defaultUsers) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultUsers) AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.AddAddress(ctx, in, opts...)
}

// 删除用户地址
func (m *defaultUsers) DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*DeleteAddressResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.DeleteAddress(ctx, in, opts...)
}

// 修改用户地址
func (m *defaultUsers) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.UpdateAddress(ctx, in, opts...)
}

// 获取所有收货地址
func (m *defaultUsers) ListAddresses(ctx context.Context, in *AllAddressLitstRequest, opts ...grpc.CallOption) (*AddressListResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.ListAddresses(ctx, in, opts...)
}

// 获取单个收货地址
func (m *defaultUsers) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error) {
	client := users.NewUsersClient(m.cli.Conn())
	return client.GetAddress(ctx, in, opts...)
}
